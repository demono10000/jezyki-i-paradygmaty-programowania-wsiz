1. 
(defun laczenieList (lista1 lista2)
(let ((wynik '()))
(dolist (item lista1)
(push item wynik))
(dolist (item lista2)
(push item wynik))
(odwroc wynik)))

(format t "Zadanie 1~%")
(format t "Podaj liste: ") (setq 1A (read))
(format t "Podaj liste: ") (setq 1B (read))
(format t "Wynik polaczenia listy A i B: ~a~%: " (laczenieList 1A 1B))
2. 
(defun odwroc (lista)
(let ((wynik '()))
(dolist (item lista)
(push item wynik))
wynik))
3. 
(defun palindrom (lista)
(let ((tempList (odwroc lista)))
(equal lista tempList)))
4. 
(defun wstawelement (element lista)
(if (null lista)
(list element)
(if (< element (car lista))
(cons element lista)
(cons (car lista) (wstawelement element (cdr lista))))))

(defun sortlist (lista)
(let ((wynik '()))
(dolist (item lista)
(setq wynik (wstawelement item wynik)))
wynik))
5. 
(defun iloczyn (lista1 lista2)
(if (or (null lista1) (null lista2))
'()
(cons (* (car lista1) (car lista2))
(iloczyn (cdr lista1) (cdr lista2)))))
6. 
(defun dziel3 (liczba)
(= (mod liczba 3) 0))

(defun zadanie6 (lista)
(let ((licznik 0))
(dolist (item lista)
(if (dziel3 item)
(setq licznik (+ licznik 1))))
licznik))
7. 
(defun dzieln (liczba n)
(= (mod liczba n) 0))

(defun zadanie7 (lista n)
(let ((licznik 0))
(dolist (item lista)
(if (dzieln item n)
(setq licznik (+ licznik 1))))
licznik))
8. 
(defun zadanie8 (stos)
(let ((wynik '()))
(dolist (item stos)
(when (= 0 (mod item 5))
(push item wynik)))
wynik))
9. 
(defun zadanie9 (a b)
(let ((wynik '()))
(do ((i b (- i 1)))
((< i a) wynik)
(push i wynik))))
10. 
(defun zadanie10 (a b)
(let ((wynik '()))
(do ((i b (- i 1)))
((< i a) wynik)
(push (code-char i) wynik))))



menu:
(defun menu ()
(format t "Wybierz program do uruchomienia:~%")
(format t "1. Łączenie list~%")
(format t "2. Odwracanie listy~%")
(format t "3. Sprawdzenie czy lista jest palindromem~%")
(format t "4. Sortowanie listy liczb całkowitych~%")
(format t "5. Obliczanie iloczynu dwóch list~%")
(format t "6. Zliczanie liczb podzielnych przez 3~%")
(format t "7. Zliczanie liczb podzielnych przez N~%")
(format t "8. Filtracja i odwrócenie stosu~%")
(format t "9. Generowanie listy liczb całkowitych~%")
(format t "10. Generowanie listy znaków ASCII~%")
(format t "Wybierz numer: ")

(let ((wybor (read)))
(case wybor
(1 (laczenieList-menu))
(2 (odwroc-menu))
(3 (palindrom-menu))
(4 (sortlist-menu))
(5 (iloczyn-menu))
(6 (zadanie6-menu))
(7 (zadanie7-menu))
(8 (zadanie8-menu))
(9 (zadanie9-menu))
(10 (zadanie10-menu))
(otherwise (format t "Nieprawidłowy wybór.")))))

(defun laczenieList-menu ()
(format t "Podaj pierwszą listę: ")
(let ((lista1 (read)))
(format t "Podaj drugą listę: ")
(let ((lista2 (read)))
(format t "Wynik połączenia list: ~a~%" (laczenieList lista1 lista2)))))

(defun odwroc-menu ()
(format t "Podaj listę do odwrócenia: ")
(let ((lista (read)))
(format t "Odwrócona lista: ~a~%" (odwroc lista))))

(defun palindrom-menu ()
(format t "Podaj listę do sprawdzenia: ")
(let ((lista (read)))
(format t "Czy lista jest palindromem: ~a~%" (palindrom lista))))

(defun sortlist-menu ()
(format t "Podaj listę do posortowania: ")
(let ((lista (read)))
(format t "Posortowana lista: ~a~%" (sortlist lista))))

(defun iloczyn-menu ()
(format t "Podaj pierwszą listę: ")
(let ((lista1 (read)))
(format t "Podaj drugą listę: ")
(let ((lista2 (read)))
(format t "Iloczyn list: ~a~%" (iloczyn lista1 lista2)))))

(defun zadanie6-menu ()
(format t "Podaj listę: ")
(let ((lista (read)))
(format t "Liczba elementów podzielnych przez 3: ~a~%" (zadanie6 lista))))

(defun zadanie7-menu ()
(format t "Podaj listę: ")
(let ((lista (read)))
(format t "Podaj N: ")
(let ((n (read)))
(format t "Liczba elementów podzielnych przez ~a: ~a~%" n (zadanie7 lista n)))))

(defun zadanie8-menu ()
(format t "Podaj stos: ")
(let ((stos (read)))
(format t "Filtrowany i odwrócony stos: ~a~%" (zadanie8 stos))))

(defun zadanie9-menu ()
(format t "Podaj A: ")
(let ((a (read)))
(format t "Podaj B: ")
(let ((b (read)))
(format t "Lista liczb z przedziału <~a, ~a>: ~a~%" a b (zadanie9 a b)))))

(defun zadanie10-menu ()
(format t "Podaj A: ")
(let ((a (read)))
(format t "Podaj B: ")
(let ((b (read)))
(format t "Lista znaków ASCII z przedziału <~a, ~a>: ~a~%" a b (zadanie10 a b)))))
